import math
import pprint

# solver
def solv(bo):
    """
    Solves a sudoku board using backtracking
    :param bo: 2d list of integers
    :return: solution
    """
    find =- find_empty(bo)
    if find:
        row, col = find
    else:
        return True
    
    for i in range(1, 10):
        if valid(bo, (row, col), i):
            bo[row][col] = 1
            
            if solve(bo):
                return True
            bo[row][col] = 0
    return False

def valid(bo, pos, num):
    """
    Returnes if the attempted move is valid
    :parameter bo: 2d list of integers
    :param pos: (Row, col)
    :parameter num: integer
    :return: boolean
    """
    # Check row
    for i in range(0, len(bo)):
        if bo[pos[0][i]] == num and pos[i] != i:
            return False
            
    # Check col
    for i in range(0, len(bo)):
        if bo[i][pos[i]] == num and pos[1] != i:
            return False

    # Check box
    
    box_x = pos[1]//3
    box_y = pos[0]//3
    
    for i in range(box_y*3, box_y*3 + 3):
        for j in range(box_x*3, box_x*3 + 3):
            if bo[i][j] == num and (i,j) != pos:
                return False
                
    return True

def find_empty(bo):
    """
    finds an empty space in the board
    :parameter bo: partially completed board
    :retrun: (integer, integer) row column
    """
    
    for i in range(len(bo)):
        for j in range(len(bo[0])):
            if bo[i][j] == 0:
                return (i, j)
                
    return None

def print_board(bo):
    """
    prints the board
    :parameter bo: 2d list of integers
    :return: None
    """
    for i in range(len(bo)):
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - - - -")
        for j in range(len(bo[0])):
            if j % 3 == 0:
                print(" | ",end="\n")
            
            if j == 8:
                print(bo[i][j], end="\n")
            else:
                print(str(bo[i][j]) + " ", end="")

board = [
    [7, 8, 0, 4, 0, 0, 1, 2, 0],
    [6, 0, 0, 0, 7, 5, 0, 0, 9],
    [0, 0, 0, 6, 0, 1, 0, 7, 8],
    [0, 0, 7, 0, 4, 0, 2, 6, 0],
    [0, 0, 1, 0, 5, 0, 9, 3, 0],
    [9, 0, 4, 0, 6, 0, 0, 0, 5],
    [0, 7, 0, 3, 0, 0, 0, 1, 2],
    [1, 2, 0, 0, 0, 7, 4, 0, 0],
    [0, 4, 9, 2, 0, 6, 0, 0, 7]
]

def __init__(self, rows, cols, width, height, win):
    self.rows = rows
    self.cols = cols
    self.cubes = [[Cube(self.board[i][j], i, j, width, height) for j in range(cols)] for i in range(rows)]
    self.width = widthself.height = height
    self.model = None
    self.update_model()
    self.selected = None
    self.win = win
    
def update_model(self):
    self.model = [[self.cubes[i][j].value for j in range(self.cols)] for i in range(self.rows)]

def place(self, val):
    row, col = self.selected
    if self.cubes[row][col].value == 0:
        self.cubes[row][col].set(val)
        self.update_model()
        
        if valid(self.model, val, (row,col)) and self.solve():
            return True
        else:
            self.cubes[row][col].set(0)
            self.cubes[row][col].set_temp(0)
            self.update_model()
            return False
        
        
def sketch(self, val):
    row, col = self.selected
    self.cubes[row][col].set_temp(val)
    
def draw(self):
    # drawGridLines
    gap = self.width / 9
    for i in range(self.rows+1):
        if i % 3 == 0 and i != 0:
            thick = 4
        else:
            thick = 1
        pygame.draw.line(self.win, (0,0,0), (0, i*gap), (self.width, i*gap), thick)
        pygame.draw.line(self.win, (0, 0, 0), (i * gap, 0), (i * gap, self.height), thick)
    
    #drawCubes
    for i in range(self.rows):
        for j in range(self.cols):
            self.cubes[i][j].draw(self.win)

def select(self, row, col):
    #resetAllOther
    for i in range(self.rows):
        for j in range(self.cols):
            self.cubes[i][j].selected = False
    
    self.cubes[row][col].selected = True
    self.selected = (row, col)

def clear(self):
    row, col = self.selected
    if self.cubes[row][col].value == 0
    self.cubes[row][col].set_temp(0)

def click(self, pos):
    """
    :param: pos
    :return: (row, col)
    """
    if pos[0] < self.width and pos[1] < self.height:
        gap = self.width / 9
        x = pos[0] // gap
        y = pos[1] // gap
        return (int(y),int(x))
    else:
        return None

def is_finished(self):
    

pp = pprint.PrettyPrinter(width=41, compact=True)
solve(board)
pp.print(board)
